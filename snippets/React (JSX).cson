".source.js, .source.jsx, .source.ts, .source.tsx, .source.flow":
  "React: import empty":
    prefix: "_i"
    body: "import ${1} from '${2}';"

  "React: import empty named":
    prefix: "_in"
    body: "import { ${1} } from '${2}';"

  "React: import":
    prefix: "_ir"
    body: "import React from 'react';"

  "React: import with Component":
    prefix: "_irc"
    body: "import React, { Component } from 'react';"

  "React: import with PureComponent":
    prefix: "_irpc"
    body: "import React, { PureComponent } from 'react';"

  "React: import with PropTypes":
    prefix: "_irp"
    body: "import React from 'react';\nimport PropTypes from 'prop-types';"

  "React: import PropTypes":
    prefix: "_ipt"
    body: "import PropTypes from 'prop-types';"

  "React: import with Component and PropTypes":
    prefix: "_ircp"
    body: "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';"

  "React: import react-dom()":
    prefix: "_ird"
    body: "import ReactDOM from 'react-dom';"

  "React: Import with useState":
    prefix: "_irs",
    body: "import React, { useState } from 'react';"

  "React: Import with useEffect":
    prefix: "_ire",
    body: "import React, { useEffect } from 'react';"

  "React: Import with useState and useEffect":
    prefix: "_irse",
    body: "import React, { useState, useEffect } from 'react';"

  "React: export empty()":
    prefix: "_ex"
    body: "export ${1};"

  "React: export default empty()":
    prefix: "_exd"
    body: "export default ${1};"

  "React: componentWillMount() { ... }":
    prefix: "_cwm"
    body: "componentWillMount() {\n\t${1}\n}${2}"

  "React: componentWillReceiveProps(np) { ... }":
    prefix: "_cwr"
    body: "componentWillReceiveProps(nextProps) {\n\t${1}\n}${2}"

  "React: shouldComponentUpdate(np, ns) { ... }":
    prefix: "_scu"
    body: "shouldComponentUpdate(nextProps, nextState) {\n\t${1}\n}${2}"

  "React: componentWillUpdate(np, ns) { ... }":
    prefix: "_cwup"
    body: "componentWillUpdate(nextProps, nextState) {\n\t${1}\n}${2}"

  "React: componentWillUnmount() { ... }":
    prefix: "_cwun"
    body: "componentWillUnmount() {\n\t${1}\n}${2}"

  "React: componentDidCatch(error, info) { ... }":
    prefix: "_cdc"
    body: "componentDidCatch(error, info) {\n\t${1}\n}${2}"

  "React: cx({ ... })":
    prefix: "_cx"
    body: "cx({\n\t$1: $2\n});"

  "React: forceUpdate(...)":
    prefix: "_fup"
    body: "forceUpdate(${1:callback});"

  "React: Class.contextTypes = { ... }":
    prefix: "_cct"
    body: "${1}.contextTypes = {\n\t${2}: PropTypes.${3:string}\n};"

  "React: Class.propTypes = { ... }":
    prefix: "_cpt"
    body: "${1}.propTypes = {\n\t${2}: PropTypes.${3:string}\n};"

  "React: Class.defaultProps = { ... }":
    prefix: "_cdp"
    body: "${1}.defaultProps = {\n\t${2}: ${3}\n};"

  "React: static contextTypes = { ... }":
    prefix: "_scct"
    body: "static contextTypes = {\n\t${1}: PropTypes.${2:string}\n}"

  "React: pure class skeleton":
    prefix: "_cepr"
    body: "import React, { PureComponent } from 'react';\n\nclass ${1} extends PureComponent {\n\n\trender() {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n\n}\n\nexport default ${1};"

  "React: Stateless Component PropTypes":
    prefix: "_rscp"
    body: "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1} = ({${2}}) => (\n\t<div>${4}</div>\n);\n\n${1}.propTypes = {\n\t${2}: PropTypes.${3}\n};\n\nexport default ${1};"

  "React: Stateless Component Return":
    prefix: "_rscr"
    body: "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1} = ({${2}}) => {\n\treturn (\n\t\t<div>${4}</div>\n\t);\n}\n\n${1}.propTypes = {\n\t${2}: PropTypes.${3}\n};\n\nexport default ${1};"

  "React: Stateless Component Click":
    prefix: "_rscc"
    body: "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ${1} = ({${2}}) => {\n\tconst handleClick = () => {};\n\treturn (\n\t\t<div onClick={handleClick}>${4}</div>\n\t);\n}\n\n${1}.propTypes = {\n\t${2}: PropTypes.${3}\n};\n\nexport default ${1};"

  "React: Stateless Function":
    prefix: "_rsf"
    body: "const ${1} = ({${2}}) => (\n\t<div>{${2}}</div>\n);"

  "React: Component displayName":
    prefix: "_cdn"
    body: "${1}.displayName = '${1}';"

  "React: render() { return ... }":
    prefix: "_ren"
    body: "render() {\n\treturn (\n\t\t${1:<div></div>}\n\t);\n}"

  "React: setState({ ... })":
    prefix: "_sst"
    body: "this.setState({\n\t${1}: ${2}\n});"

  "React: useState(const [... , ...])":
    prefix: "_ust"
    body: "const [${1}, set${1/(.+)/\\u$1/}] = useState(${2})"

  "React: this.props.":
    prefix: "_props"
    body: "this.props.${1}"

  "React: destruct this.props.":
    prefix: "_dprops"
    body: "const { ${1} } = this.props;"

  "React: this.state.":
    prefix: "_state"
    body: "this.state.${1}"

  "React: destruct this.state.":
    prefix: "_dstate"
    body: "const { ${1} } = this.state;"

  "React: destruct object.":
    prefix: "_dobj"
    body: "const { ${1} } = ${2};"

  "React: render(component, container, [callback])":
    prefix: "_rrc"
    body: "React.render(${1:<$2 />}, ${3:document.body}${4:, ${5:callback}});"

  "React: Fragment":
    prefix: "_frag"
    body: "<React.Fragment>\n\t$1\n</React.Fragment>"

  "React: class Foo extends Bar":
    prefix: "_clss"
    body: "class ${1:Foo} extends ${2:React.Component} {\n\trender() {\n\t\t${3}\n\t}\n}"

  "React: dangerouslySetInnerHTML":
    prefix: "_dnghtml"
    body: "dangerouslySetInnerHTML={{__html: ${1}}}"

  # PropTypes
  "React: PropType array":
    prefix: '_pta',
    body: "PropTypes.array,"

  "React: PropType array required":
    prefix: "_ptar",
    body: "PropTypes.array.isRequired,"

  "React: PropType bool":
    prefix: "_ptb",
    body: "PropTypes.bool,"

  "React: PropType bool required":
    prefix: "_ptbr",
    body: "PropTypes.bool.isRequired,"

  "React: PropType function":
    prefix: "_ptf",
    body: "PropTypes.func,"

  "React: PropType function required":
    prefix: "_ptfr",
    body: "PropTypes.func.isRequired,"

  "React: PropType number":
    prefix: "_ptn",
    body: "PropTypes.number,"

  "React: PropType number required":
    prefix: "_ptnr",
    body: "PropTypes.number.isRequired,"

  "React: PropType object":
    prefix: "_pto",
    body: "PropTypes.object,"

  "React: PropType object required":
    prefix: "_ptor",
    body: "PropTypes.object.isRequired,"

  "React: PropType string":
    prefix: "_pts",
    body: "PropTypes.string,"

  "React: PropType string required":
    prefix: "_ptsr",
    body: "PropTypes.string.isRequired,"

  "React: PropType node":
    prefix: "_ptnd",
    body: "PropTypes.node,"

  "React: PropType node required":
    prefix: "_ptndr",
    body: "PropTypes.node.isRequired,"

  "React: PropType element":
    prefix: "_ptel",
    body: "PropTypes.element,"

  "React: PropType element required":
    prefix: "_ptelr",
    body: "PropTypes.element.isRequired,"

  "React: PropType instanceOf":
    prefix: "_pti",
    body: "PropTypes.instanceOf(${1}),"

  "React: PropType instanceOf required":
    prefix: "_ptir",
    body: "PropTypes.instanceOf(${1}).isRequired,"

  "React: PropType oneOf":
    prefix: "_pte",
    body: "PropTypes.oneOf([${1}]),"

  "React: PropType oneOf required":
    prefix: "_pter",
    body: "PropTypes.oneOf([${1}]).isRequired,"

  "React: PropType oneOfType":
    prefix: "_ptet",
    body: "PropTypes.oneOfType([${1}]),"

  "React: PropType oneOfType required":
    prefix: "_ptetr",
    body: "PropTypes.oneOfType([${1}]).isRequired,"

  "React: PropType arrayOf":
    prefix: "_ptao",
    body: "PropTypes.arrayOf(${1}),"

  "React: PropType arrayOf required":
    prefix: "_ptaor",
    body: "PropTypes.arrayOf(${1}).isRequired,"

  "React: PropType objectOf":
    prefix: "_ptoo",
    body: "PropTypes.objectOf(${1}),"

  "React: PropType objectOf required":
    prefix: "_ptoor",
    body: "PropTypes.objectOf(${1}).isRequired,"

  "React: PropType shape":
    prefix: "_ptsh",
    body: "PropTypes.shape({${1}}),"

  "React: PropType shape required":
    prefix: "_ptshr",
    body: "PropTypes.shape({${1}}).isRequired,"






  "React: Function Component skeleton":
    prefix: "fc"
    body: "//import React from 'react';\n\n//const ${1} = ({${2}}) => (\n\t//<div>${4}</div>\n//);\n\n//export default ${1};\n\n\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n//import { signInOut } from '../actions';\n\nconst ${1} = ({}) => (\n\t<div></div>\n);\n\nconst mapStateToProps = ({ auth }, ownProps) => {\n\treturn { isSignedIn: auth.isSignedIn };\n};\n\nexport default connect(\n\tmapStateToProps,\n\t//{ signInOut }\n)(${1});"

  "React: Class Component skeleton":
    prefix: "cc"
    body: "import React, { Component } from 'react';\n\nclass ${1} extends Component {\n\tstate = {};\n\n\t// static getDerivedStateFromProps(props,state) {}; static propTypes = {onHandleSubmit: PropTypes.func}; static defaultProps = {message: 'Loading...'}\n\t// componentDidMount() {}\n\t// shouldComponentUpdate(nextProps, nextState) {}\n\t// getSnapshotBeforeUpdate(prevProps, prevState) {}\n\t// componentDidUpdate(prevProps, prevState, snapshot) {}\n\t// componentWillUnmount() {}\n\t// click handlers or event handlers like onClickSubmit() or onChangeDescription()\n\t// getter methods for render like getSelectReason() or getFooterContent()\n\t// optional render methods like renderNavigation() or renderProfilePicture()\n\n\trender() {\n\t\treturn (\n\t\t\t${2:<div></div>}\n\t\t);\n\t}\n\n}\n\nexport default ${1};"

  "React: Container skeleton":
    prefix: "container"
    body: "import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//import { signInOut } from '../actions';\n\nclass ${1} extends Component {\n\tstate = {};\n\n\t// static getDerivedStateFromProps(props,state) {}; static propTypes = {onHandleSubmit: PropTypes.func}; static defaultProps = {message: 'Loading...'}\n\t// componentDidMount() {}\n\t// shouldComponentUpdate(nextProps, nextState) {}\n\t// getSnapshotBeforeUpdate(prevProps, prevState) {}\n\t// componentDidUpdate(prevProps, prevState, snapshot) {}\n\t// componentWillUnmount() {}\n\t// click handlers or event handlers like onClickSubmit() or onChangeDescription()\n\t// getter methods for render like getSelectReason() or getFooterContent()\n\t// optional render methods like renderNavigation() or renderProfilePicture()\n\n\trender() {\n\t\treturn <div></div>;\n\t}\n}\n\nconst mapStateToProps = ({ auth }, ownProps) => {\n\treturn { isSignedIn: auth.isSignedIn };\n};\n\nexport default connect(\n\tmapStateToProps,\n\t//{ signInOut }\n)(${1});"

  "React: constructor(props)":
    prefix: "constructor"
    body: "constructor(props) {\n\tsuper(props);\n\t${1:this.state = ${2};}\n}"

  "React: componentDidMount() { ... }":
    prefix: "cdm"
    body: "componentDidMount() {\n\t${1}\n}${2}"

  "React: componentDidUpdate(pp, ps) { ... }":
    prefix: "cdu"
    body: "componentDidUpdate(prevProps, prevState) {\n\t${1}\n}${2}"

  "React: ErrorBoundary skeleton":
    prefix: "eb"
    body: "import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n\tstate = { hasError: false }; \n\n\tstatic getDerivedStateFromError(error) {\n\t\t// Update state so the next render will show the fallback UI.\n\t\treturn { hasError: true };\n\t}\n\n\tcomponentDidCatch(error, errorInfo) {\n\t\t// You can also log the error to an error reporting service\n\t\tlogErrorToMyService(error, errorInfo);\n\t}\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\t// You can render any custom fallback UI\n\t\t\treturn <h1>Something went wrong.</h1>;\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundary;"

  "React: HOC skeleton":
    prefix: "hoc"
    body: "import React, { Component } from 'react';\n\nfunction with${1}(WrappedComponent) {\n\treturn class extends React.Component {\n\t\tstate = {\n\t\t\tdata: {}\n\t\t};\n\n\t\tcomponentDidMount() {}\n\n\t\thandleClick = () => {};\n\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<WrappedComponent\n\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\thandleClick={this.handleClick}\n\t\t\t\t\t{...this.props}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t};\n}\n\nexport default with${1};"

  "React: index.js skeleton":
    prefix: "index"
    body: "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\nimport App from './components/App';\n\nconst composeEnhancers =\n\tprocess.env.NODE_ENV === 'development'\n\t\t? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\t\t: compose;\n\nconst store = createStore(\n\treducers,\n\tcomposeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);"

  "React: App.js skeleton":
    prefix: "app"
    body: "import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\n\n// import Header from './Header';\n// import StreamList from './streams/StreamList';\n// import StreamCreate from './streams/StreamCreate';\n// import StreamEdit from './streams/StreamEdit';\nimport history from '../history';\n\nconst App = () => {\n\treturn (\n\t\t<div className=''>\n\t\t\t<Router history={history}>\n\t\t\t\t<div>\n\t\t\t\t\t{/*<Header />*/}\n\t\t\t\t\t<Switch>
    \n\t\t\t\t\t\t{/*<Route path='/' exact component={StreamList} />\n\t\t\t\t\t\t<Route path='/streams/new' exact component={StreamCreate} />\n\t\t\t\t\t\t<Route path='/streams/edit/:id' exact component={StreamEdit} />*/}\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</div>\n\t);\n};\n\nexport default App;"

  "React: history object":
    prefix: "h"
    body: "//auto installed with react-router-dom as separate library\nimport { createBrowserHistory } from 'history';\n\n//create a history object that we can access anywhere in our app for programmatic navigation\n//otherwise we only have access to it inside a Component through this.props.history\n//need to replace <BrowserRouter> with <Router> inside App.js\nexport default createBrowserHistory();"

  "React: index.js reducers":
    prefix: "ir"
    body: "import { combineReducers } from 'redux';\n//import { reducer as formReducer } from 'redux-form';\n\n//import authReducer from './authReducer';\n\nexport default combineReducers({\n\t//auth: authReducer, //temp: () => 'temp'\n\t//form: formReducer\n});"

  "React: reducer skeleton":
    prefix: "r"
    body: "//import { SIGN_IN, SIGN_OUT } from '../actions/types';\n\nconst INITIAL_STATE = {\n\t//isSignedIn: null,\n\t//userId: null\n};\n\nexport default (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\t//case SIGN_IN:\n\t\t\t//return { ...state, isSignedIn: true, userId: action.payload };\n\t\t//case SIGN_OUT:\n\t\t\t//return { ...state, isSignedIn: false, userId: null };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};"

  "React: action creators skeleton":
    prefix: "ac"
    body: "//import axios from 'axios';\nimport history from '../history';\n//import { SIGN_IN, SIGN_OUT } from './types';\n\nexport const signInOut = (isSignedIn, userId) => {\n\tif (isSignedIn) {\n\t\treturn {\n\t\t\ttype: SIGN_IN,\n\t\t\tpayload: userId\n\t\t};\n\t} else {\n\t\treturn {\n\t\t\ttype: SIGN_OUT\n\t\t};\n\t}\n};\n\nexport const createStream = formValues => async (dispatch, getState) => {
      \n\t//formValues.userId = getState().auth.userId;\n\t//const response = await axios.post('http://localhost:3001/streams', formValues);\n\tdispatch({\n\t\t//type: CREATE_STREAM,\n\t\t//payload: response.data\n\t});\n\thistory.push('/');\n};"

  "React: static propTypes = { ... }":
    prefix: "pt"
    body: "// npm install prop-types --save\n// import PropTypes from 'prop-types';\nstatic propTypes = {\n\t${1}: PropTypes.${2:string}\n}\n// PropTypes.array//.isRequired\n// PropTypes.bool//.isRequired\n// PropTypes.func//.isRequired\n// PropTypes.number//.isRequired\n// PropTypes.object//.isRequired\n// PropTypes.string//.isRequired\n\n// Anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types:\n// PropTypes.node//.isRequired\n\n// A React element:\n// PropTypes.element//.isRequired\n\n// You can also declare that a prop is an instance of a class. This uses JS's instanceof operator:\n// PropTypes.instanceOf(ClassNameHere)//.isRequired\n\n// You can ensure that your prop is limited to specific values by treating it as an enum:\n// PropTypes.oneOf(['News', 'Photos'])//.isRequired\n\n// An object that could be one of many types:\n// PropTypes.oneOfType([PropTypes.string, PropTypes.number])//.isRequired\n\n
    // An array of a certain type:\n// PropTypes.arrayOf(PropTypes.number)//.isRequired\n\n// An object with property values of a certain type:\n// PropTypes.objectOf(PropTypes.number)//.isRequired\n\n// An object taking on a particular shape:\n// PropTypes.shape({color: PropTypes.string, fontSize: PropTypes.number})//.isRequired\n\n// An object with warnings on extra properties:\n// PropTypes.exact({color: PropTypes.string, fontSize: PropTypes.number})//.isRequired\n\n// A value of any data type:\n// PropTypes.any.isRequired"

  "React: static defaultProps = { ... }":
    prefix: "dp"
    body: "static defaultProps = {\n\t${1}: ${2}\n}"

  "React: create React element":
    prefix: "e"
    body: "<${1} className=''></${1}>"

  # "React: create React controlled input element":
  #   prefix: "input"
  #   body: "//handleChange = e => this.setState({${1}: e.target.value.toUpperCase()})\n<div className=''>\n\t<label>${2}</label>\n\t<input type='text' value={this.state.${1}} onChange={this.handleChange} />\n</div>"
  #
  # "React: create React image element":
  #   prefix: "img"
  #   body: "// <img className='' alt={} src={}  />\n// OR\n// import ${1} from '../assets/${2}.jpg';\n// <img className='' alt={} src={${1}} />"
  #
  # "React: create React Router Link element":
  #   prefix: "link"
  #   body: "// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom/docs/api\n<Link to='${1}' className=''>${2}</Link>"
  #
  # "React: create React Router NavLink element":
  #   prefix: "navlink"
  #   body: "// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-dom/docs/api\n<NavLink exact to='${1}' activeClassName={styles.active}>${2}</NavLink> // .active can be changed"
